{"version":3,"sources":["../../../src/components/collections/grid/row.jsx"],"names":[],"mappings":"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","file":"row.js","sourcesContent":["import React from 'react';\nimport { Numbers, validateClassProps } from '../../utilities';\nimport DefaultProps from '../../defaultProps';\nimport classNames from 'classnames';\n\nconst validProps = {\n    aligned: ['right', 'left', 'center'],\n    valigned: ['top', 'middle', 'bottom']\n};\n\nfunction getClasses(props) {\n    let classes = {\n        row: props.defaultClasses,\n        centered: props.centered,\n        doubling: props.doubling,\n        stretched: props.stretched,\n        justified: props.justified\n    };\n    \n    if (props.columns && props.columns > 0 && props.columns <= 16) {\n        classes[`${Numbers[props.columns]} column`] = true;\n    }\n    \n    classes[props.color] = !!props.color;\n    \n    if (props.equal) {\n        classes['equal width'] = true;\n    }\n    \n    if (props.only) {\n        let device;\n        if (Array.isArray(props.only)) {\n            device = props.only.join(' ');\n        } else {\n            device = props.only;\n        }\n        if (device) {\n            classes[`${device} only`] = true;\n        }\n    }\n    \n    return validateClassProps(classes, props, validProps, { valigned: 'aligned' });\n}\n\n/**\n * Grid row\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nlet Row = (props) => {\n    /* eslint-disable no-use-before-define */\n    let {\n        aligned, component, centered, children, columns, defaultClasses, doubling, equal,\n        stretched, color, only, justified, ...other\n    } = props;\n    /* eslint-enable no-use-before-define */\n    \n    let Component = component;\n    other.className = classNames(other.className, getClasses(props));\n    \n    return (\n        <Component {...other}>\n            {children}\n        </Component>\n    );\n};\n\nRow.propTypes = {\n    ...DefaultProps.propTypes,\n    /**\n     * Horizontal content alignment\n     */\n    aligned: React.PropTypes.oneOf(['right', 'left', 'center']),\n    /**\n     * Center columns in row\n     */\n    centered: React.PropTypes.bool,\n    /**\n     * Double column width on tablet and mobile sizes\n     */\n    doubling: React.PropTypes.bool,\n    /**\n     * Automatically resize elements to split the available width evently\n     */\n    equal: React.PropTypes.bool,\n    /**\n     * Only visible for types. Could be single type string or array, i.e. only={[\"mobile\",\"tablet\"]}\n     */\n    only: React.PropTypes.oneOfType([\n        React.PropTypes.oneOf([\n            'mobile', 'tablet', 'computer', 'large screen', 'widescreen'\n        ]),\n        React.PropTypes.arrayOf(React.PropTypes.oneOf([\n            'mobile', 'tablet', 'computer', 'large screen', 'widescreen'\n        ])) \n    ]),\n    /**\n     * Specify row columns count\n     */\n    columns: React.PropTypes.number,\n    /**\n     * Stretch content to take up the entire column height\n     */\n    stretched: React.PropTypes.bool,\n    /**\n     * Row color\n     */\n    color: React.PropTypes.string,\n    /**\n     * Justified content fits exactly inside the grid column, taking up the entire width from one side to the other\n     */\n    justified: React.PropTypes.bool,\n    /**\n     * Vertical content alignment\n     */\n    valigned: React.PropTypes.oneOf(['top', 'middle', 'bottom'])\n};\n\nRow.defaultProps = {\n    ...DefaultProps.defaultProps\n};\n\nexport default Row;\n\n"]}