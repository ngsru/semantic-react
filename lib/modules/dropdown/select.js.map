{"version":3,"sources":["../../../src/components/modules/dropdown/select.jsx"],"names":[],"mappings":"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","file":"select.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport shallowCompare from 'react-addons-shallow-compare';\nimport EventListener from 'react-event-listener';\nimport Transition from 'react-motion-ui-pack';\nimport DropdownElement from './dropdownelement';\nimport { Label, Icon, Header } from '../../elements';\nimport { Menu } from '../../views';\nimport { isNodeInRoot } from '../../utilities';\n\n/**\n * Select is the dropdown where options could be selected, either single or multiple.\n * Also supports search\n */\nexport default class Select extends React.Component {\n    static propTypes = {\n        ...DropdownElement.propTypes,\n        /**\n         * Should be dropdown opened\n         */\n        active: React.PropTypes.bool,\n        /**\n         * Enter animation\n         */\n        enterAnimation: React.PropTypes.object,\n        /**\n         * Leave animation\n         */\n        leaveAnimation: React.PropTypes.object,\n        /**\n         * Name for dropdown input\n         */\n        name: React.PropTypes.string,\n        /**\n         * Icon name for dropdown\n         */\n        icon: React.PropTypes.string,\n        /**\n         * String used as placeholder if dropdown has no selected value\n         * Will be grayed (<div class=\"default text\">) if dropdown is selection \n         * or normally displayed (<div class=\"text\">) otherwise\n         */\n        placeholder: React.PropTypes.string,\n        /**\n         * Searchable dropdown\n         */\n        search: React.PropTypes.bool,\n        /**\n         * Search glyph width\n         */\n        searchGlyphWidth: React.PropTypes.number,\n        /**\n         * Ignore case when performing search\n         */\n        searchIgnoreCase: React.PropTypes.bool,\n        /**\n         * Search box position\n         */\n        searchPosition: React.PropTypes.oneOf([\n            'dropdown', 'menu'\n        ]),\n        /**\n         * Search header, valid only for searchPosition=\"menu\"\n         */\n        searchHeader: React.PropTypes.string,\n        /**\n         * Specify message which will be displayed when search has no results\n         */\n        searchNoResultsMessage: React.PropTypes.string,\n        /**\n         * Search string\n         */\n        searchString: React.PropTypes.string,\n        /**\n         * Selected value\n         */\n        selected: React.PropTypes.arrayOf(React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number])),\n        /**\n         * Behave dropdown as HTML select\n         */\n        selection: React.PropTypes.bool,\n        /**\n         * Allow multiple selection\n         */\n        multiple: React.PropTypes.bool,\n        /**\n         * Callback will be called when current selected value was changed. \n         * Will pass array of new selected values as first param and total options count as second\n         */\n        onSelectChange: React.PropTypes.func,\n        /**\n         * Callback will be called when selection dropdown wants to be closed. For now only for outside of dropdown clicks\n         */\n        onRequestClose: React.PropTypes.func,\n        /**\n         * Callback will be called when search string is being changed. You probably just need to pass it back to component\n         */\n        onSearchStringChange: React.PropTypes.func\n        \n    };\n    \n    static defaultProps = {\n        ...DropdownElement.defaultProps,\n        active: false,\n        icon: 'dropdown',\n        search: false,\n        searchGlyphWidth: 1.0714,\n        searchPosition: 'dropdown',\n        searchIgnoreCase: true,\n        searchNoResultsMessage: 'No Results found.',\n        searchString: '',\n        selection: true,\n        selected: [],\n        multiple: false,\n        enterAnimation: {\n            height: 'auto'\n        },\n        leaveAnimation: {\n            height: 0\n        },\n        onSelectChange: () => {},\n        onRequestClose: () => {},\n        onSearchStringChange: () => {}\n    };\n    \n    constructor(props) {\n        super(props);\n\n        /**\n         * Menu reference\n         */\n        this.menuRef = null;\n        this.searchRef = null;\n        this.noResultsMessageRef = null;\n    }\n    \n    componentDidMount() {\n        const { active, search } = this.props;\n        if (search && this.searchRef && active) {\n            this.searchRef.focus();\n        }\n    }\n    \n    shouldComponentUpdate(nextProps, nextState) {\n        return shallowCompare(this, nextProps, nextState);\n    }\n    \n    componentDidUpdate() {\n        const { active, search } = this.props;\n        if (search && this.searchRef && active) {\n            this.searchRef.focus();\n        }\n    }\n    \n    /**\n     * Handler for outside click\n     */\n    onOutsideDropdownClick = (event) => {\n        const { active, onRequestClose } = this.props;\n        if (!active) {\n            return;\n        }\n        const element = ReactDOM.findDOMNode(this);\n        if (element) {\n            if (!isNodeInRoot(event.target, element)) {\n                onRequestClose();\n            }\n        }\n    };\n\n    /**\n     * Handler for menu item click\n     * @param value\n     */\n    onMenuItemClick = (value) => {\n        let { search, selected, multiple, onSelectChange, onSearchStringChange } = this.props;\n        const optionsCount = (this.menuRef) ? React.Children.count(this.menuRef.props.children) : 0;\n        if (selected.indexOf(value) === -1) {\n            if (multiple) {\n                // Append value for multiple\n                onSelectChange([...selected, value], optionsCount);\n            } else {\n                // replace for single\n                onSelectChange([value], optionsCount);\n            }\n            \n            // Intelligently handle multiple select here:\n            // Do not request close if selecting and there are more than 1 element left in menu\n            // Set focus to search box if searchable\n            // Close if menu has only 1 element\n            if (multiple && this.menuRef) {\n                if (optionsCount <= 1) {\n                    // Clean search string\n                    onSearchStringChange('');\n                } else if (search && this.searchRef) {\n                    // we have few more elements here, put focus if searchable\n                    this.searchRef.focus();\n                }\n            } else if (this.searchRef) {\n                // always clean search string for single selection dropdowns\n                onSearchStringChange('');\n            }\n        }\n    };\n\n    /**\n     * Handler for close label click\n     * @param value\n     */\n    onLabelCloseIconClick(value) {\n        const { selected, onSelectChange } = this.props;\n        const optionsCount = (this.menuRef) ? React.Children.count(this.menuRef.props.children) : 0;\n        const index = selected.indexOf(value);\n        if (index !== -1) {\n            onSelectChange([...selected.filter(val => val !== value)], optionsCount);\n        }\n    }\n\n    /**\n     * Handler for search input change\n     * @param {React.KeyboardEvent} event\n     */\n    onSearchInputChange = (event) => {\n        const { onSearchStringChange } = this.props;\n        \n        onSearchStringChange(event.target.value);\n    };\n    \n    /**\n     * Handler for search input key events\n     * @param {React.KeyboardEvent} event\n     */\n    onSearchInputKeyDown = (event) => {\n        switch (event.which) {\n        // Enter\n        case 13:\n            // only do something if we have search results available and not displaying not results message\n            if (this.menuRef && !this.noResultsMessageRef && React.Children.count(this.menuRef.props.children) > 0) {\n                // get the first children\n                let child = React.Children.toArray(this.menuRef.props.children)[0];\n                if (child && child.props.value) {\n                    // enter should do the same as menu item click\n                    this.onMenuItemClick(child.props.value);\n                }\n            }\n            break;\n        // Backspace\n        case 8:\n            const { multiple, searchString, selected, onSelectChange } = this.props;\n            if (searchString === '') {\n                if (multiple && selected.length > 0) {\n                    onSelectChange([...selected.slice(0, -1)])\n                }\n            }\n            break;\n        }\n    };\n\n    /**\n     * Renders dropdown hidden input \n     */\n    renderDropdownInput() {\n        const { name, selected } = this.props;\n        const value = selected.join(',');\n        \n        return (\n            <input name={name} \n                   type=\"hidden\" \n                   value={value} />\n        );\n    }\n\n    /**\n     * Renders dropdown labels for multiple type dropdowns\n     */\n    renderDropdownLabels() {\n        const { multiple, selected } = this.props;\n        // Selection labels should appear only for multiple dropdowns\n        if (!multiple) {\n            return null;\n        }\n        \n        \n        return React.Children.map(this.props.children, child => {\n            // Process only option or option like childs and if it's selected\n            if (child.props.value && selected.indexOf(child.props.value) !== -1) {\n                return (\n                    <Transition component={false}\n                                enter={{ scale: 1 }}\n                                leave={{ scale: 0 }}\n                    >\n                        <Label component=\"a\"\n                               key={`label-${child.props.value}`}\n                               style={{ display: 'inline-block' }}\n                        >\n                            {child.props.children}\n                            <Icon name=\"close\"\n                                  onClick={this.onLabelCloseIconClick.bind(this, child.props.value)}/>\n                        </Label>\n                    </Transition>\n                );\n            }\n        });\n    }\n\n    /**\n     * Render dropdown placeholder text\n     */\n    renderDropdownText() {\n        /* eslint-disable no-use-before-define */\n        const { multiple, placeholder, search, selected, searchString, selection } = this.props;\n        /* eslint-enable no-use-before-define */\n\n        // Render placeholder if not selected anything or multiple\n        if (selected.length === 0 || multiple) {\n            if (typeof placeholder !== 'undefined') {\n                // Selection type should use default text, non selection text\n                return (\n                    <div className={selection ? 'default text' : 'text'}>{placeholder}</div>\n                )\n            } else {\n                return null;\n            }\n        } else {\n            // Single selection here\n            // Render selected children in text div here if selected anything\n            let content = <div className=\"text filtered\"></div>;\n            // Do not render when performing search\n            if (!search || !searchString) {\n                // traverse in childs, find necessary node\n                React.Children.forEach(this.props.children, child => {\n                    if (child.props.value && selected.indexOf(child.props.value) !== -1) {\n                        content = <div className=\"text\">{child.props.children}</div>\n                    }\n                });\n            }\n            return content;\n        }\n    }\n\n    /**\n     * Renders dropdown icon\n     */\n    renderDropdownIcon() {\n        const { icon } = this.props;\n        return (\n            <Icon name={icon}/>\n        )\n    }\n\n    /**\n     * Renders search input\n     */\n    renderSearchInput() {\n        const { search, searchGlyphWidth, searchString, searchPosition, multiple } = this.props;\n        \n        // Do not render if not searchable\n        if (!search) {\n            return null;\n        }\n        \n        const searchWidth = searchGlyphWidth * searchString.length;\n        // single selection dropdown shouldn't apply width style\n        const style = searchWidth && searchPosition === 'dropdown' && multiple ? { width: `${searchWidth}em` } : {};\n        if (searchPosition === 'dropdown') {\n            return (\n                <input autoComplete=\"off\"\n                       className=\"search\"\n                       key=\"searchInput\"\n                       onChange={this.onSearchInputChange}\n                       onKeyDown={this.onSearchInputKeyDown}\n                       ref={ref => this.searchRef = ref}\n                       style={style}\n                       tabIndex={0}\n                       value={searchString}/>\n            )\n        } else {\n            // Search in menu has slightly different layout\n            return (\n                <div className=\"ui icon search input\">\n                    <Icon name=\"search\"/>\n                    <input key=\"searchInput\"\n                           onChange={this.onSearchInputChange}\n                           onKeyDown={this.onSearchInputKeyDown}\n                           placeholder=\"Search...\"\n                           ref={ref => this.searchRef = ref}\n                           tabIndex={0}\n                           type=\"text\"\n                           value={searchString}/>\n                </div>\n            )\n        }\n    }\n\n    /**\n     * Renders search header if specified\n     */\n    renderSearchHeader() {\n        const { search, searchHeader } = this.props;\n        if (search && searchHeader) {\n            return (<Header key=\"searchHeader\">{searchHeader}</Header>);\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Filters children options to exclude selected elements or elements which doesn't match to search\n     */\n    renderFilteredChildren() {\n        const { search, searchIgnoreCase, selected, searchString, multiple } = this.props;\n        const searchRegex  = new RegExp(searchString, searchIgnoreCase ? 'gi' : 'g');\n        \n        let newChildren = [];\n        React.Children.forEach(this.props.children, child => {\n            // only process option like childs\n            if (child.props.value) {\n                let match = true;\n                if (search && searchString !== '') {\n                    // value could be int or string. In case of int convert it to string\n                    const value = (typeof child.props.value === 'number') ? Number.parseInt(child.props.value) : child.props.value;\n                    match = (searchRegex.test(value) || searchRegex.test(child.props.children));\n                }\n                \n                // Match for non search selection will be always true\n                if (match) {\n                    // For multiple type render only non selected options\n                    if (multiple && selected.indexOf(child.props.value) === -1) {\n                        newChildren.push(React.cloneElement(\n                            child,\n                            {\n                                key: child.key ? child.key : child.props.value,\n                                // need to pass menu value, otherwise menu will not bind handler\n                                menuValue: child.props.value\n                            }\n                        ));\n                    } else if (!multiple) {\n                        // for single selection render all options but add selected value\n                        newChildren.push(React.cloneElement(\n                            child,\n                            {\n                                active: (selected.indexOf(child.props.value) !== -1),\n                                key: child.key ? child.key : child.props.value,\n                                // need to pass menu value, otherwise menu will not bind handler\n                                menuValue: child.props.value\n                            }\n                        ));\n                    }\n                }\n            } else if (searchString === '') {\n                // need to pass non option like childs, but only if search string is empty\n                newChildren.push(React.cloneElement(\n                    child,\n                    {\n                        key: child.key ? child.key : child.props.value\n                    }\n                ));\n            }\n        });\n        return newChildren;\n    }\n    \n    render() {\n        /* eslint-disable no-use-before-define */\n        const {\n            active, children, enterAnimation, leaveAnimation, icon, name, search, searchPosition, searchHeader, \n            searchString, searchGlyphWidth, searchIgnoreCase, searchNoResultsMessage, placeholder, selected, selection,\n            multiple, onSelectChange, onRequestClose, onSearchStringChange, ...other\n        } = this.props;\n        /* eslint-enable no-use-before-define */\n        \n        // make new array for menu childrens\n        let menuChildrens = [];\n        // render search and header in menu\n        if (search && searchPosition === 'menu') {\n            if (searchHeader) {\n                menuChildrens.push(this.renderSearchHeader());\n            }\n            menuChildrens.push(this.renderSearchInput());\n        }\n        \n        let filteredChilds = this.renderFilteredChildren();\n        // Display no results message instead of children if needed\n        if ((!filteredChilds || filteredChilds.length === 0) && (search && searchString != '')) {\n            filteredChilds = [\n                <div className=\"message\" \n                     key=\"noResultsMessage\" \n                     ref={ref => this.noResultsMessageRef = ref}\n                >\n                    {searchNoResultsMessage}\n                </div>\n            ]; // eslint-disable-line\n        }\n        \n        menuChildrens = menuChildrens.concat(filteredChilds);\n        \n        other.className = classNames(other.className, this.getClasses());\n        \n        return (\n            <DropdownElement\n                {...other}\n                active={active}\n            >\n                {/* This will embed <noscript></noscript> inside dropdown div. Shouldn't cause any problems */}\n                <EventListener elementName=\"document\"\n                               onMouseDown={this.onOutsideDropdownClick}\n                               onTouchStart={this.onOutsideDropdownClick}/>\n                {this.renderDropdownInput()}\n                {this.renderDropdownLabels()}\n                {this.renderDropdownText()}\n                {this.renderDropdownIcon()}\n                {search && searchPosition === 'dropdown' && \n                this.renderSearchInput()\n                }\n                <Transition\n                    component={false}\n                    enter={enterAnimation}\n                    leave={leaveAnimation}\n                >\n                    {active &&\n                    <Menu key=\"menu\"\n                          onMenuItemClick={this.onMenuItemClick}\n                          ref={ref => this.menuRef = ref}\n                          style={{ overflow: 'hidden' }}\n                    >\n                        {menuChildrens}\n                    </Menu>\n                    }\n                </Transition>\n            </DropdownElement>\n        );\n    }\n    \n    getClasses() {\n        return {\n            search: this.props.search,\n            selection: this.props.selection,\n            multiple: this.props.multiple\n        }\n    }\n}\n"]}