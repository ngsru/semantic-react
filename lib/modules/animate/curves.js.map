{"version":3,"sources":["../../../src/components/modules/animate/curves.js"],"names":[],"mappings":"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","file":"curves.js","sourcesContent":["/*eslint-disable */\n/* Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License:\n http://en.wikipedia.org/wiki/MIT_License */\nexports.bezier = function(mX1, mY1, mX2, mY2) {\n    var NEWTON_ITERATIONS = 4,\n        NEWTON_MIN_SLOPE = 0.001,\n        SUBDIVISION_PRECISION = 0.0000001,\n        SUBDIVISION_MAX_ITERATIONS = 10,\n        kSplineTableSize = 11,\n        kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),\n        float32ArraySupported = \"Float32Array\" in window;\n\n    /* Must contain four arguments. */\n    if (arguments.length !== 4) {\n        return false;\n    }\n\n    /* Arguments must be numbers. */\n    for (var i = 0; i < 4; ++i) {\n        if (typeof arguments[i] !== \"number\" || isNaN(arguments[i]) || !isFinite(arguments[i])) {\n            return false;\n        }\n    }\n\n    /* X values must be in the [0, 1] range. */\n    mX1 = Math.min(mX1, 1);\n    mX2 = Math.min(mX2, 1);\n    mX1 = Math.max(mX1, 0);\n    mX2 = Math.max(mX2, 0);\n\n    var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n    function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n    function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n    function C (aA1)      { return 3.0 * aA1; }\n\n    function calcBezier (aT, aA1, aA2) {\n        return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n    }\n\n    function getSlope (aT, aA1, aA2) {\n        return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n    }\n\n    function newtonRaphsonIterate (aX, aGuessT) {\n        for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n            var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n            if (currentSlope === 0.0) return aGuessT;\n\n            var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n            aGuessT -= currentX / currentSlope;\n        }\n\n        return aGuessT;\n    }\n\n    function calcSampleValues () {\n        for (var i = 0; i < kSplineTableSize; ++i) {\n            mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n        }\n    }\n\n    function binarySubdivide (aX, aA, aB) {\n        var currentX, currentT, i = 0;\n\n        do {\n            currentT = aA + (aB - aA) / 2.0;\n            currentX = calcBezier(currentT, mX1, mX2) - aX;\n            if (currentX > 0.0) {\n                aB = currentT;\n            } else {\n                aA = currentT;\n            }\n        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n        return currentT;\n    }\n\n    function getTForX (aX) {\n        var intervalStart = 0.0,\n            currentSample = 1,\n            lastSample = kSplineTableSize - 1;\n\n        for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n        }\n\n        --currentSample;\n\n        var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample+1] - mSampleValues[currentSample]),\n            guessForT = intervalStart + dist * kSampleStepSize,\n            initialSlope = getSlope(guessForT, mX1, mX2);\n\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT);\n        } else if (initialSlope === 0.0) {\n            return guessForT;\n        } else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);\n        }\n    }\n\n    var _precomputed = false;\n\n    function precompute() {\n        _precomputed = true;\n        if (mX1 !== mY1 || mX2 !== mY2) calcSampleValues();\n    }\n\n    var f = function (aX) {\n        if (!_precomputed) precompute();\n        if (mX1 === mY1 && mX2 === mY2) return aX;\n        if (aX === 0) return 0;\n        if (aX === 1) return 1;\n\n        return calcBezier(getTForX(aX), mY1, mY2);\n    };\n\n    f.getControlPoints = function() { return [{ x: mX1, y: mY1 }, { x: mX2, y: mY2 }]; };\n\n    var str = \"generateBezier(\" + [mX1, mY1, mX2, mY2] + \")\";\n    f.toString = function () { return str; };\n\n    return f;\n};\n\n\n/* Runge-Kutta spring physics function generator. Adapted from Framer.js,\n copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */\n/* Given a tension, friction, and duration, a simulation at 60FPS will first run\n without a defined duration in order to calculate the full path. A second pass\n then adjusts the time delta -- using the relation between actual time and\n duration -- to calculate the path for the duration-constrained animation. */\nexports.spring = (function () {\n    function springAccelerationForState (state) {\n        return (-state.tension * state.x) - (state.friction * state.v);\n    }\n\n    function springEvaluateStateWithDerivative (initialState, dt, derivative) {\n        var state = {\n            x: initialState.x + derivative.dx * dt,\n            v: initialState.v + derivative.dv * dt,\n            tension: initialState.tension,\n            friction: initialState.friction\n        };\n\n        return { dx: state.v, dv: springAccelerationForState(state) };\n    }\n\n    function springIntegrateState (state, dt) {\n        var a = {\n                dx: state.v,\n                dv: springAccelerationForState(state)\n            },\n            b = springEvaluateStateWithDerivative(state, dt * 0.5, a),\n            c = springEvaluateStateWithDerivative(state, dt * 0.5, b),\n            d = springEvaluateStateWithDerivative(state, dt, c),\n            dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),\n            dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);\n\n        state.x = state.x + dxdt * dt;\n        state.v = state.v + dvdt * dt;\n\n        return state;\n    }\n\n    return function springRK4Factory (tension, friction, duration) {\n\n        var initState = {\n                x: -1,\n                v: 0,\n                tension: null,\n                friction: null\n            },\n            path = [0],\n            time_lapsed = 0,\n            tolerance = 1 / 10000,\n            DT = 16 / 1000,\n            have_duration, dt, last_state;\n\n        tension = parseFloat(tension) || 500;\n        friction = parseFloat(friction) || 20;\n        duration = duration || null;\n\n        initState.tension = tension;\n        initState.friction = friction;\n\n        have_duration = duration !== null;\n\n        /* Calculate the actual time it takes for this animation to complete with the provided conditions. */\n        if (have_duration) {\n            /* Run the simulation without a duration. */\n            time_lapsed = springRK4Factory(tension, friction);\n            /* Compute the adjusted time delta. */\n            dt = time_lapsed / duration * DT;\n        } else {\n            dt = DT;\n        }\n\n        while (true) {\n            /* Next/step function .*/\n            last_state = springIntegrateState(last_state || initState, dt);\n            /* Store the position. */\n            path.push(1 + last_state.x);\n            time_lapsed += 16;\n            /* If the change threshold is reached, break. */\n            if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {\n                break;\n            }\n        }\n\n        /* If duration is not defined, return the actual time required for\n         completing this animation. Otherwise, return a closure that holds\n         the computed path and returns a snapshot of the position according to\n         a given percentComplete. */\n        return !have_duration ? time_lapsed : function(percentComplete) {\n            return path[ (percentComplete * (path.length - 1)) | 0 ];\n        };\n    };\n}());\n/*eslint-enable */"]}